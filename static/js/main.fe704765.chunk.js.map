{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","Searchbox","placeholder","handelChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","catch","error","console","log","this","filteredMonster","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCHbC,EAAW,SAAAR,GACpB,OAAO,sBAAKC,UAAU,YAAf,UACHD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,OAFpB,SCHEO,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOC,KAAK,SACJb,UAAU,YACVW,YAAaA,EACbG,SAAUF,KCsCPG,E,kDApCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAJJ,E,qDAQb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,OACvCE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,mB,oBAG9B,WAAU,IAAD,SAC0BC,KAAKZ,MAA9BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZY,EAAkBrB,EAASsB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQG,KAAK0B,cAAcC,SAASf,EAAYc,kBAEjD,OACE,sBAAK/B,UAAU,MAAf,UACI,iDACA,cAAC,EAAD,CACEW,YAAY,cACZC,aAAc,SAAAqB,GAAC,OAAI,EAAKV,SAAS,CAACN,YAAcgB,EAAEC,OAAOC,WAE3D,cAAC,EAAD,CAAU3B,SAAUqB,W,GA7BZO,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fe704765.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n        <h5>{props.monster.name}</h5>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => {\r\n    return <div className=\"card-list\">{\r\n        props.monsters.map(monster =>\r\n            <Card key={monster.id} monster={monster} />)\r\n    }  </div>;\r\n}","import React from 'react'\r\n\r\nexport const Searchbox = ({placeholder, handelChange}) => (\r\n    <input type=\"search\" \r\n            className=\"mt10 mb20\"\r\n            placeholder={placeholder}\r\n            onChange={handelChange}>\r\n          </input>\r\n)","import { Component } from \"react\";\nimport './App.css';\n\nimport {CardList} from './components/card-list/card-list.component';\nimport { Searchbox } from \"./components/searchbox/search-box.component\";\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n    .catch(error => console.log(\"some error\"));\n  }\n\n  render() {\n    const { monsters, searchField} = this.state;\n    const filteredMonster = monsters.filter(monster => \n     monster.name.toLowerCase().includes(searchField.toLowerCase()) \n      )\n    return (\n      <div className=\"App\">\n          <h1>Monster Rolodex</h1>\n          <Searchbox\n            placeholder=\"Search user\"\n            handelChange={e => this.setState({searchField : e.target.value})}\n          ></Searchbox>\n          <CardList monsters={filteredMonster}>\n            \n          </CardList>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}